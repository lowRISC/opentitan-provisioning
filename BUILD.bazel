# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

load("@bazelbuild_buildtools//buildifier:def.bzl", "buildifier", "buildifier_test")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_go//go:def.bzl", "nogo")
load("@lowrisc_misc_linters//rules:rules.bzl", "licence_check")
load("//rules:quality.bzl", "clang_format_check", "gofmt")

config_setting(
    name = "windows",
    constraint_values = [
        "@platforms//os:windows",
    ],
)

nogo(
    name = "vet",
    vet = True,
    visibility = ["//visibility:public"],
)

licence_check(
    name = "licence-check",
    exclude_patterns = [
        # Uncommented formats.
        "*.md",
        "*.json",
        ".gitignore",
        "**/.gitignore",
        "src/registry_service/*.go",
        "src/registry_upload/*.go",
        "src/registry_buffer/*.go",
        "src/manifest_reporting/*.go",
        "src/registry_service/*.proto",
        "src/registry_buffer/*.proto",
        "src/manifest_reporting/*.proto",
        "src/manifest_reporting/*.bazel",
        "src/test_service/store/mysql.go",
        "src/test_service/store/connector.go",
        "src/test_service/ts_client.go",
        "src/test_service/store/db.go",
        "src/test_service/services/testservice.go",
        "src/message_service/*.*",
        "src/message_client/*.*",
        ".github/CODEOWNERS",

        # Copyright-related files that don"t need a header.
        "CLA",
        "LICENSE",
    ],
    licence = """
    Copyright lowRISC contributors (OpenTitan project).
    Licensed under the Apache License, Version 2.0, see LICENSE for details.
    SPDX-License-Identifier: Apache-2.0
    """,
)

gofmt(
    name = "check_gofmt",
    mode = "diff",
)

gofmt(
    name = "gofmt",
    mode = "fix",
)

clang_format_check(
    name = "check_clang_format",
    exclude_patterns = [
        # Vendored source code dirs
        "./**/third_party/**",
    ],
    mode = "diff",
)

clang_format_check(
    name = "clang_format",
    exclude_patterns = [
        # Vendored source code dirs
        "./**/third_party/**",
    ],
    mode = "fix",
)

buildifier_exclude = [
    "./WORKSPACE",  # Prevent Buildifier from inserting unnecessary newlines.
]

buildifier(
    name = "buildifier_fix",
    exclude_patterns = buildifier_exclude,
)

buildifier_test(
    name = "buildifier_check",
    diff_command = "diff -u",
    exclude_patterns = buildifier_exclude,
    mode = "diff",
    no_sandbox = True,
    verbose = True,
    workspace = "//:WORKSPACE",
)

# Use this rule to update Go dependencies.
#
# Note: Gazelle really likes to mess with WORKSPACE, even though
# we'd like for it not too. Make sure to run git restore WORKSPACE
# after this rule.
gazelle(
    name = "update-go-repos",
    args = [
        "-from_file=go.mod",
        "-to_macro=third_party/go/deps.bzl%go_packages_",
        "--build_file_proto_mode=disable_global",
    ],
    command = "update-repos",
)

container_image(
    name = "base_image",
    base = "@ubuntu2204//image",
    files = ["@softhsm2"],
    visibility = ["//visibility:public"],
)
