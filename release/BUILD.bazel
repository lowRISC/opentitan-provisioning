# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

load("@io_bazel_rules_docker//container:container.bzl", "container_bundle")
load("@lowrisc_bazel_release//release:release.bzl", "release")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

container_bundle(
    name = "provisioning_appliance_containers",
    images = {
        "podman_pause:latest": "@container_k8s_pause//image",
        "pa_server:latest": "//src/pa:pa_server_image",
        "spm_server:latest": "//src/spm:spm_server_image",
    },
)

filegroup(
    name = "provisioning_appliance_containers_tar",
    srcs = [":provisioning_appliance_containers"],
    output_group = "tar",
)

pkg_tar(
    name = "provisioning_appliance_binaries",
    srcs = [
        "//src/pa:pa_server",
        "//src/spm:spm_server",
    ],
    extension = "tar.xz",
)

container_bundle(
    name = "proxybuffer_containers",
    images = {
        "pb_server:latest": "//src/proxy_buffer:pb_server_image",
    },
)

filegroup(
    name = "proxybuffer_containers_tar",
    srcs = [":proxybuffer_containers"],
    output_group = "tar",
)

pkg_tar(
    name = "proxybuffer_binaries",
    srcs = ["//src/proxy_buffer:pb_server"],
    extension = "tar.xz",
)

container_bundle(
    name = "fakeregistry_containers",
    images = {
        "fakeregistry_server:latest": "//src/testing/fake_registry:fake_registry_server_image",
    },
)

filegroup(
    name = "fakeregistry_containers_tar",
    srcs = [":fakeregistry_containers"],
    output_group = "tar",
)

pkg_tar(
    name = "fakeregistry_binaries",
    srcs = ["//src/testing/fake_registry:fake_registry_server"],
    extension = "tar.xz",
)

pkg_tar(
    name = "softhsm_dev",
    srcs = [
        "@softhsm2",
    ],
    extension = "tar.xz",
)

pkg_tar(
    name = "hsmutils",
    srcs = [
        "@lowrisc_opentitan//sw/host/hsmtool",
    ],
    extension = "tar.xz",
)

pkg_tar(
    name = "release_bundle",
    srcs = [
        ":hsmutils",
        "//config:release",
    ],
    extension = "tar.xz",
    strip_prefix = "release",
)

release(
    name = "release",
    artifacts = {
        "//config:release": "Deployment scripts",
        ":provisioning_appliance_binaries": "Provisioning Appliance binaries",
        ":proxybuffer_binaries": "ProxyBuffer binaries",
        ":softhsm_dev": "SoftHSM2 development binaries",
        "//src/ate:windows": "ATE Win32 binaries",
        ":hsmutils": "HSM configuration binaries",
    },
)
