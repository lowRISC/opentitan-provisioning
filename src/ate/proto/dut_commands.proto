// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Contains the definitions of JSON messages used to communicate with the
// provisioning firmware running on CP and FT test stages.

syntax = "proto3";

package ot.dut_commands;

option go_package = "dut_commands_go_pb";

// Provides the manuf_cp_provisioning_data data structure used by
// provisioning firmware.
message TokensJSON {
  // wafer_auth_secret contains the wafer authentication secret.
  // It must contain 8 uint32 values. Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint32 wafer_auth_secret = 1;
  // test_unlock_token_hash contains the test unlock token hash.
  // It must contain 2 uint64 values. Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint64 test_unlock_token_hash = 2;
  // test_exit_token_hash contains the test exit token hash.
  // It must contain 2 uint64 values. Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint64 test_exit_token_hash = 3;
}

// Provides the manuf_cp_provisioning_data_out data structure used by
// provisioning firmware.
message DeviceIdJSON {
  // cp_device_id contains the device identifier generated by the CP
  // test stage. It must contain 4 uint32 values. Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint32 cp_device_id = 1;
}

// Provides the lc_token_hash_t data structure used by provisioning firmware.
message RmaTokenJSON {
  // hash contains the unlock token hash. It must contain 2 uint64 values.
  // Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint64 hash = 1;
}

// Provides the manuf_certgen_inputs_t data structure used by provisioning
// firmware.
message CaSerialNumbersJSON {
  // dice_auth_key_key_id contains the DICE CA serial number. It must contain 20
  // bytes, to hold a SHA1 hash. Protobuf does not have a "uint8" type, such
  // that we can define a message field of "repeated uint8". Protobuf only has a
  // "bytes" type, and defining a message field of type "bytes" will not
  // serialize to {"a", "b", ...}, but rather to {"ab"} which is not what the
  // provisioning firmware will expect. Therefore we define this field as
  // `repeated uint32` and software ensures each unsigned integer in the array
  // does not exceed 255.
  // Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint32 dice_auth_key_key_id = 1;
  // ext_auth_key_key_id contains the auxiliary CA serial number. It must
  // contain 20 bytes to hold a SHA1 hash. See above for why this field is
  // defined as `repeated uint32` instead of `bytes`.
  // Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint32 ext_auth_key_key_id = 2;
}

// Provides the perso_blob_t data structure used by provisioning firmware.
message PersoBlobJSON {
  // num_objs contains the number of objects in the blob. Required.
  uint32 num_objs = 1;
  // next_free contains the byte offset of the next free object in the blob.
  // Required.
  uint32 next_free = 2;
  // blob contains the blob data. Required.
  // The provisioning firmware expects this to be a byte array of size
  // 5120.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint32 body = 3;
}

