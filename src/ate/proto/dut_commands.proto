// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Contains the definitions of JSON messages used to communicate with the
// provisioning firmware running on CP and FT test stages.

syntax = "proto3";

package ot.dut_commands;

option go_package = "dut_commands_go_pb";

// Provides the manuf_cp_provisioning_data data structure used by
// provisioning firmware.
message CpProvisioningDataJSON {
  // wafer_auth_secret contains the wafer authentication secret.
  // It must contain 8 uint32 values. Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint32 wafer_auth_secret = 1;
  // test_unlock_token_hash contains the test unlock token hash.
  // It must contain 2 uint64 values. Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint64 test_unlock_token_hash = 2;
  // test_exit_token_hash contains the test exit token hash.
  // It must contain 2 uint64 values. Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint64 test_exit_token_hash = 3;
}

// Provides the manuf_cp_provisioning_data_out data structure used by
// provisioning firmware.
message CpProvisioningDataOutJSON {
  // cp_device_id contains the device identifier generated by the CP
  // test stage. It must contain 4 uint32 values. Required.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated uint32 cp_device_id = 1;
}

// Provides the lc_token_hash_t data structure used by provisioning firmware.
message FtTokenHashJSON {
  // hash contains the unlock token hash. It must contain 2 uint64 values.
  // Required.
  uint64 hash = 1;
}

// Provides the perso_blob_t data structure used by provisioning firmware.
message FtPersoBlobJSON {
  // num_objs contains the number of objects in the blob. Required.
  uint32 num_objs = 1;
  // next_free contains the byte offset of the next free object in the blob.
  // Required.
  uint32 next_free = 2;
  // blob contains the blob data. Required.
  // The provisioning firmware expects this to be a byte array of size
  // 5120.
  bytes body = 3;
}

