// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Message/enum definitions for DeviceId, Certificate, and DeviceData
// messages. These definitions are shared by all services.

syntax = "proto3";

package device_id;

option go_package = "device_id_go_pb";

// OpenTitan Silicon Creator ID.
//
// Identifies an OpenTitan SiliconCreator (chip manufacturer).
// protolint:disable:next MAX_LINE_LENGTH
// See https://docs.google.com/document/d/1IuxBKj0jxMpnXUadO9lHBjj_HsdWnKlgnddyx_b7BEQ/edit#heading=h.a6x2uby224xc
enum SiliconCreatorId {
  // Unspecified
  SILICON_CREATOR_ID_UNSPECIFIED = 0;
  // Open Source (for testing).
  SILICON_CREATOR_ID_OPENSOURCE = 0x0001;
  // Nuvoton
  SILICON_CREATOR_ID_NUVOTON = 0x4001;
}

// OpenTitan Product ID.
//
// Identifies an OpenTitan Product manufactured by various SiliconCreators.
// protolint:disable:next MAX_LINE_LENGTH
// See https://docs.google.com/document/d/1IuxBKj0jxMpnXUadO9lHBjj_HsdWnKlgnddyx_b7BEQ/edit#heading=h.a6x2uby224xc
enum ProductId {
  // Unspecified
  PRODUCT_ID_UNSPECIFIED = 0;
  // Earlgrey Engineering Sample (Z1).
  PRODUCT_ID_EARLGREY_Z1 = 0x0001;
  // Earlgrey Production v1.0.0 (A1).
  PRODUCT_ID_EARLGREY_A1 = 0x0002;
}

// OpenTitan Hardware Origin.
//
// Encodes a combination of SiliconCreator (manufacturer) and Product IDs, along
// with a device specific identifier.
message HardwareOrigin {
  // Silicon Creator ID.
  //
  // Enum that deserializes into 16 bits.
  // Size is enforced at a higher level, not by protobuf.
  SiliconCreatorId silicon_creator_id = 1;
  // Product ID (per SiliconCreator).
  //
  // Enum that deserializes into 16 bits.
  // Size is enforced at a higher level, not by protobuf.
  ProductId product_id = 2;
  // Device Identification Number.
  //
  // A unique number given to each device within a Hardware Origin domain.
  fixed64 device_identification_number = 3;
};

// OpenTitan Device ID.
//
// The contents of this message are intended to be used as a globally unique
// identifier for an OpenTitan chip.
message DeviceId {
  // Hardware Origin.
  //
  // Identifies the Silicon Creator, their Product line, and a specific device.
  HardwareOrigin hardware_origin = 1;
  // Silicon Creator or SKU Owner can use this field as desired.
  //
  // 128 bits (size is enforced at a higher level, not by protobuf).
  bytes sku_specific = 2;
  // IEEE802.3 CRC32.
  //
  // This CRC covers the entire (deserialized) region above, and is calculated
  // at a higher level, not by protobuf.
  fixed32 crc32 = 3;
}

// A Certificate.
message Certificate {
  // Opaque bytes.
  //
  // Protobuf knows nothing about internal structure of this blob;
  // that's handled at a higher level, not by protobuf.
  // See https://pkg.go.dev/crypto/x509#CreateCertificate for details.
  bytes blob = 1;
}

// TODO: delete this?
// specify the type of the public device id format.
enum DeviceIdPubFormat {
  // default -- not valid in messages
  DEVICE_ID_PUB_FORMAT_UNSPECIFIED = 0;

  DEVICE_ID_PUB_FORMAT_DER = 1;

  DEVICE_ID_PUB_FORMAT_PEM = 2;

  DEVICE_ID_PUB_FORMAT_RAW_ECDSA = 3;  // X & Y
}

// A Device ID Public.
message DeviceIdPub {
  // specify the type of the public device id format.
  DeviceIdPubFormat format = 1;
  // Opaque bytes.
  //
  // Protobuf knows nothing about internal structure of this blob;
  // that's handled at a higher level, not by protobuf.
  bytes blob = 2;
}

// The state of the device.
enum DeviceState {
  // UNSPECIFIED (zero-value) is the default -- not valid in messages.
  DEVICE_STATE_UNSPECIFIED = 0;
  // The device has been provisioned and the
  // registration data is valid.
  DEVICE_STATE_PROVISIONED = 1;
  // The device has been provisioned and provisioning data read
  // by the manifest reporting service
  DEVICE_STATE_PROV_READ = 2;
  // The device has been provisioned and provisioning data
  // reported successfully by the manifest reporting service
  DEVICE_STATE_PROV_REPORT = 3;
  // The device failed provisioning and the data is
  // invalid.
  DEVICE_STATE_INVALID = 4;
  // The manufacturer revoked the provisioning data
  // associated with this device.
  DEVICE_STATE_REVOKED = 5;
}

// A metadata
message Metadata {
  DeviceState state = 1;
  // Time at which the device record was created.
  uint64 create_time_ms = 2;
  // Time at which the device was last updated.
  uint64 update_time_ms = 3;
  // ATE unique identifier.
  string ate_id = 4;
  // ATE unstructured data associated with the device.
  string ate_raw = 5;
  // Year
  uint32 year = 6;
  // Week number.
  uint32 week = 7;
  // lot number.
  uint32 lot_num = 8;
  // Wafer ID.
  uint32 wafer_id = 9;
  // X position.
  uint32 x = 10;
  // Y position.
  uint32 y = 11;
}

// OpenTitan Device Life Cycle.
//
// Encodes the state of the device as it is being manufactured and provisioned
// for shipment.
enum DeviceLifeCycle {
  // UNSPECIFIED (zero-value) is the default -- not valid in messages.
  DEVICE_LIFE_CYCLE_UNSPECIFIED = 0;
  // RAW
  DEVICE_LIFE_CYCLE_RAW = 1;
  // TEST_LOCKED
  DEVICE_LIFE_CYCLE_TEST_LOCKED = 2;
  // TEST_UNLOCKED
  DEVICE_LIFE_CYCLE_TEST_UNLOCKED = 3;
  // DEV
  DEVICE_LIFE_CYCLE_DEV = 4;
  // PROD
  DEVICE_LIFE_CYCLE_PROD = 5;
  // PROD_END
  DEVICE_LIFE_CYCLE_PROD_END = 6;
  // RMA
  DEVICE_LIFE_CYCLE_RMA = 7;
  // SCRAP
  DEVICE_LIFE_CYCLE_SCRAP = 8;
  // INVALID
  DEVICE_LIFE_CYCLE_INVALID = 9;
  // EOL
  DEVICE_LIFE_CYCLE_EOL = 10;
}

// Device Data for a given device.
//
// The value for which DeviceId is the key.
message DeviceData {
  // Device ID pub that associated with this device.
  repeated DeviceIdPub device_id_pubs = 1;
  // 256-2048 bytes (SKU-specific -- see "Device ID Provisioning >>
  // Device Registration"[1]).
  //
  // protolint:disable:next MAX_LINE_LENGTH
  // [1] https://docs.google.com/document/d/1dE7vR791Atp7Wu7Ss90K1MvdyoroouSHPdq_RXQ2R8I#bookmark=id.n9feo7yvyhle
  //     FIXME: Replace above with a pointer to markdown TBD.
  bytes payload = 2;

  bytes next_owner_keys = 3;

  // Device life cycle of this device.
  DeviceLifeCycle device_life_cycle = 4;

  // see "Device ID Provisioning Device Registration"[1].
  Metadata metadata = 5;
}

// Combined device ID and data.
message DeviceRecord {
  // SKU name.
  string sku = 1;
  // Device unique identifier.
  DeviceId id = 2;
  // Device data.
  DeviceData data = 3;
}
