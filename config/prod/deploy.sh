#!/bin/bash
# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

set -e

################################################################################
# Check usage.
################################################################################
usage() {
    echo >&2 "ERROR: $1"
    echo >&2 ""
    echo >&2 "Usage: $0 <release-dir>"
    exit 1
}

################################################################################
# Parse args.
################################################################################
if [ $# != 1 ]; then
    usage "Unexpected number of arguments"
fi
RELEASE_DIR=$1
if [ ! -d "${RELEASE_DIR}" ]; then
    usage "RELEASE_DIR: ${RELEASE_DIR} does not exist"
fi
CONFIG_DIR="$(dirname "$0")"

################################################################################
# Source envars.
################################################################################
source "${CONFIG_DIR}/env/spm.env"

################################################################################
# Create deployment dir structure.
################################################################################
echo "Staging deployment directory structure ..."
if [ ! -d "${OPENTITAN_VAR_DIR}" ]; then
    echo "Creating config directory: ${OPENTITAN_VAR_DIR}. This requires sudo."
    sudo mkdir -p "${OPENTITAN_VAR_DIR}"
    sudo chown "${USER}" "${OPENTITAN_VAR_DIR}"
fi
mkdir -p "${OPENTITAN_VAR_DIR}/config/prod/spm"
cp -r "${CONFIG_DIR}/env" "${OPENTITAN_VAR_DIR}/config/prod"
cp -Rf ${CONFIG_DIR}/spm/* "${OPENTITAN_VAR_DIR}/config/prod/spm"
echo "Done."

################################################################################
# Install hsmtool to deployment dir.
################################################################################
echo "Installing HSM configuration utilities ..."
if [ ! -d "${OPENTITAN_VAR_DIR}/bin" ]; then
    mkdir -p "${OPENTITAN_VAR_DIR}/bin"
fi
tar -xvf "${RELEASE_DIR}/hsmutils.tar.xz" --directory "${OPENTITAN_VAR_DIR}/bin"

################################################################################
# Unpack the infrastructure release binaries (PA, SPM, ProxyBuffer, etc.).
################################################################################
echo "Unpacking release binaries and container images ..."
mkdir -p "${OPENTITAN_VAR_DIR}/prod/release"
if [ -z "${CONTAINERS_ONLY}" ]; then
    tar -xvf "${RELEASE_DIR}/provisioning_appliance_binaries.tar.xz" \
        --directory "${OPENTITAN_VAR_DIR}/prod/release"
    tar -xvf "${RELEASE_DIR}/proxybuffer_binaries.tar.xz" \
        --directory "${OPENTITAN_VAR_DIR}/prod/release"
else
    sudo cp "${RELEASE_DIR}/provisioning_appliance_containers.tar" \
        "${OPENTITAN_VAR_DIR}/prod/release/"
    sudo cp "${RELEASE_DIR}/proxybuffer_containers.tar" \
        "${OPENTITAN_VAR_DIR}/prod/release/"
    echo "Skipping unpacking raw binaries; deploying containers only ..."
fi
echo "Done."

################################################################################
# Load and configure infrastructure containers.
################################################################################
echo "Loading containers to podman local registry ..."
# Configure podman to use the local k8s pause container.
mkdir -p ~/.config/containers
cat << EOF > ~/.config/containers/containers.conf
# Configuration autogenerated by deployment script $0
[engine]

infra_image = "podman_pause:latest"

EOF
podman load \
    -i "${OPENTITAN_VAR_DIR}/prod/release/provisioning_appliance_containers.tar"
podman load \
    -i "${OPENTITAN_VAR_DIR}/prod/release/proxybuffer_containers.tar"
echo "Done."

################################################################################
# Launch containers with podman.
################################################################################
echo "Launching containers ..."
podman play kube "${CONFIG_DIR}/containers/provapp.yml" \
    --configmap="${CONFIG_DIR}/env/spm.yml"
echo "Done."
