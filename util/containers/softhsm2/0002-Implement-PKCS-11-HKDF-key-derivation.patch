From 3f193efad93c89793454ae6ee2b7aabe93912c06 Mon Sep 17 00:00:00 2001
From: Miguel Young de la Sota <mcyoung@google.com>
Date: Mon, 7 Mar 2022 16:00:13 -0500
Subject: [PATCH] Implement PKCS#11 HKDF key derivation

---
 src/lib/SoftHSM.cpp     | 142 ++++++++++++++++++++++++++++++++++++++--
 src/lib/pkcs11/pkcs11.h |  43 +++++++++++-
 2 files changed, 179 insertions(+), 6 deletions(-)

diff --git a/src/lib/SoftHSM.cpp b/src/lib/SoftHSM.cpp
index dac68a3..38e95f5 100644
--- a/src/lib/SoftHSM.cpp
+++ b/src/lib/SoftHSM.cpp
@@ -166,7 +166,8 @@ static CK_RV newP11Object(CK_OBJECT_CLASS objClass, CK_KEY_TYPE keyType, CK_CERT
 			    (keyType == CKK_SHA224_HMAC) ||
 			    (keyType == CKK_SHA256_HMAC) ||
 			    (keyType == CKK_SHA384_HMAC) ||
-			    (keyType == CKK_SHA512_HMAC))
+			    (keyType == CKK_SHA512_HMAC) ||
+          (keyType == CKK_HKDF))
 			{
 				P11GenericSecretKeyObj* key = new P11GenericSecretKeyObj();
 				*p11object = key;
@@ -821,6 +822,7 @@ void SoftHSM::prepareSupportedMecahnisms(std::map<std::string, CK_MECHANISM_TYPE
 	t["CKM_CONCATENATE_DATA_AND_BASE"] = CKM_CONCATENATE_DATA_AND_BASE;
 	t["CKM_CONCATENATE_BASE_AND_DATA"] = CKM_CONCATENATE_BASE_AND_DATA;
 	t["CKM_CONCATENATE_BASE_AND_KEY"] = CKM_CONCATENATE_BASE_AND_KEY;
+	t["CKM_HKDF_DERIVE"] = CKM_HKDF_DERIVE;
 
 	supportedMechanisms.clear();
 	for (auto it = t.begin(); it != t.end(); ++it)
@@ -7242,6 +7244,7 @@ CK_RV SoftHSM::C_DeriveKey
 		case CKM_CONCATENATE_DATA_AND_BASE:
 		case CKM_CONCATENATE_BASE_AND_DATA:
 		case CKM_CONCATENATE_BASE_AND_KEY:
+    case CKM_HKDF_DERIVE:
 			break;
 
 		default:
@@ -7275,8 +7278,10 @@ CK_RV SoftHSM::C_DeriveKey
 		return CKR_KEY_FUNCTION_NOT_PERMITTED;
 
 	// Check if the specified mechanism is allowed for the key
-	if (!isMechanismPermitted(key, pMechanism))
+	if (!isMechanismPermitted(key, pMechanism)) {
+    INFO_MSG("Mechanism not allowed");
 		return CKR_MECHANISM_INVALID;
+  }
 
 	// Extract information from the template that is needed to create the object.
 	CK_OBJECT_CLASS objClass;
@@ -7306,7 +7311,8 @@ CK_RV SoftHSM::C_DeriveKey
 	    keyType != CKK_DES &&
 	    keyType != CKK_DES2 &&
 	    keyType != CKK_DES3 &&
-	    keyType != CKK_AES)
+	    keyType != CKK_AES &&
+      keyType != CKK_HKDF)
 		return CKR_TEMPLATE_INCONSISTENT;
 
 	// Check authorization
@@ -7362,7 +7368,8 @@ CK_RV SoftHSM::C_DeriveKey
 	    pMechanism->mechanism == CKM_AES_CBC_ENCRYPT_DATA ||
 	    pMechanism->mechanism == CKM_CONCATENATE_DATA_AND_BASE ||
 	    pMechanism->mechanism == CKM_CONCATENATE_BASE_AND_DATA ||
-	    pMechanism->mechanism == CKM_CONCATENATE_BASE_AND_KEY)
+	    pMechanism->mechanism == CKM_CONCATENATE_BASE_AND_KEY ||
+      pMechanism->mechanism == CKM_HKDF_DERIVE)
 	{
 		// Check key class and type
 		CK_KEY_TYPE baseKeyType = key->getUnsignedLongValue(CKA_KEY_TYPE, CKK_VENDOR_DEFINED);
@@ -7386,6 +7393,9 @@ CK_RV SoftHSM::C_DeriveKey
 		if (pMechanism->mechanism == CKM_AES_CBC_ENCRYPT_DATA &&
 		    baseKeyType != CKK_AES)
 			return CKR_KEY_TYPE_INCONSISTENT;
+		if (pMechanism->mechanism == CKM_HKDF_DERIVE &&
+		    baseKeyType != CKK_HKDF && baseKeyType != CKK_GENERIC_SECRET)
+			return CKR_KEY_TYPE_INCONSISTENT;
 
 		return this->deriveSymmetric(hSession, pMechanism, hBaseKey, pTemplate, ulCount, phKey, keyType, isOnToken, isPrivate);
 	}
@@ -11285,6 +11295,7 @@ CK_RV SoftHSM::deriveSymmetric
 	CK_BBOOL isOnToken,
 	CK_BBOOL isPrivate)
 {
+  DEBUG_MSG("deriveSymmetric()");
 	*phKey = CK_INVALID_HANDLE;
 	CK_OBJECT_HANDLE_PTR phOtherKey = CK_INVALID_HANDLE;
 	OSObject *otherKey = NULL_PTR;
@@ -11297,6 +11308,7 @@ CK_RV SoftHSM::deriveSymmetric
 
 	ByteString data;
 
+  bool needs_value_len = true;
 	if ((pMechanism->mechanism == CKM_DES_ECB_ENCRYPT_DATA ||
 	    pMechanism->mechanism == CKM_DES3_ECB_ENCRYPT_DATA) &&
 	    pMechanism->ulParameterLen == sizeof(CK_KEY_DERIVATION_STRING_DATA))
@@ -11406,6 +11418,15 @@ CK_RV SoftHSM::deriveSymmetric
 		}
 		DEBUG_MSG("(0x%08X) Other key handle is (0x%08X)", phOtherKey, *phOtherKey);
 	}
+  else if (pMechanism->mechanism == CKM_HKDF_DERIVE &&
+      pMechanism->ulParameterLen == sizeof(CK_HKDF_PARAMS)) {
+    auto params = CK_HKDF_PARAMS_PTR(pMechanism->pParameter);
+    needs_value_len = params->bExpand;
+    if (params->ulSaltType == CKF_HKDF_SALT_KEY) {
+      phOtherKey = &params->hSaltKey;
+      DEBUG_MSG("(0x%08X) Other key handle is (0x%08X)", phOtherKey, *phOtherKey);
+    }
+  }
 	else
 	{
 		DEBUG_MSG("pParameter is invalid");
@@ -11423,7 +11444,7 @@ CK_RV SoftHSM::deriveSymmetric
 		return CKR_GENERAL_ERROR;
 
 	// Extract another key
-	if (pMechanism->mechanism == CKM_CONCATENATE_BASE_AND_KEY) {
+	if (phOtherKey != CK_INVALID_HANDLE) {
 		// Check the key handle.
 		otherKey = (OSObject *)handleManager->getObject(*phOtherKey);
 		if (otherKey == NULL_PTR || !otherKey->isValid()) return CKR_OBJECT_HANDLE_INVALID;
@@ -11446,6 +11467,7 @@ CK_RV SoftHSM::deriveSymmetric
 				INFO_MSG("CKA_VALUE must not be included");
 				return CKR_ATTRIBUTE_READ_ONLY;
 			case CKA_VALUE_LEN:
+        if (!needs_value_len) { break; }
 				if (pTemplate[i].ulValueLen != sizeof(CK_ULONG))
 				{
 					INFO_MSG("CKA_VALUE_LEN does not have the size of CK_ULONG");
@@ -11506,7 +11528,13 @@ CK_RV SoftHSM::deriveSymmetric
 					return CKR_ATTRIBUTE_VALUE_INVALID;
 				}
 				break;
+      case CKK_HKDF:
+				if (byteLen != 0) {
+					INFO_MSG("CKA_VALUE_LEN will be ignored");
+				}
+				break;
 			default:
+        INFO_MSG("unknown key type");
 				return CKR_ATTRIBUTE_VALUE_INVALID;
 		}
 	}
@@ -11563,6 +11591,7 @@ CK_RV SoftHSM::deriveSymmetric
 	    case CKM_CONCATENATE_DATA_AND_BASE:
 	    case CKM_CONCATENATE_BASE_AND_DATA:
 	    case CKM_CONCATENATE_BASE_AND_KEY:
+      case CKM_HKDF_DERIVE:
 	        break;
 		default:
 			return CKR_MECHANISM_INVALID;
@@ -11612,6 +11641,107 @@ CK_RV SoftHSM::deriveSymmetric
             	return rv;
             }
         }
+    } else if (pMechanism->mechanism == CKM_HKDF_DERIVE) {
+      DEBUG_MSG("running HKDF...");
+      auto* params = CK_HKDF_PARAMS_PTR(pMechanism->pParameter);
+      if (!params->bExtract && !params->bExpand) {
+        return CKR_MECHANISM_INVALID;
+      }
+      
+      // Find out if we have a sensible PRF; we only bother with SHA-2.
+      MacAlgo::Type macTy;
+      switch (params->prfHashMechanism) {
+        case CKM_SHA256:
+          macTy = MacAlgo::HMAC_SHA256;
+          break;
+        case CKM_SHA384:
+          macTy = MacAlgo::HMAC_SHA384;
+          break;
+        case CKM_SHA512:
+          macTy = MacAlgo::HMAC_SHA512;
+          break;
+        default:
+          INFO_MSG("Bad hash for HKDF");
+          return CKR_MECHANISM_INVALID;
+      }
+      MacAlgorithm* mac = CryptoFactory::i()->getMacAlgorithm(macTy);
+      if (mac == NULL) return CKR_MECHANISM_INVALID;
+
+      SymmetricKey* secretkey = new SymmetricKey();
+      if (getSymmetricKey(secretkey, token, baseKey) != CKR_OK) {
+          mac->recycleKey(secretkey);
+          CryptoFactory::i()->recycleMacAlgorithm(mac);
+          return CKR_GENERAL_ERROR;
+      }
+
+      // First, do an extract if necessary.
+      if (params->bExtract) {
+        switch (params->ulSaltType) {
+          case CKF_HKDF_SALT_NULL:
+            data.resize(mac->getMacSize()); // All zeros.
+            break;
+          case CKF_HKDF_SALT_DATA:
+            data = ByteString(params->pSalt, params->ulSaltLen);
+            break;
+          case CKF_HKDF_SALT_KEY:
+            // Already loaded into data above.
+            break;
+          default:
+          mac->recycleKey(secretkey);
+          CryptoFactory::i()->recycleMacAlgorithm(mac);
+            return CKR_MECHANISM_INVALID;
+        }
+
+        bool ok = true;
+        SymmetricKey salt;
+        salt.setKeyBits(data);
+        ok &= mac->signInit(&salt);
+        ok &= mac->signUpdate(secretkey->getKeyBits());
+
+        ByteString out;
+        ok &= mac->signFinal(out);
+
+        mac->recycleKey(secretkey);
+        if (!ok) {
+            CryptoFactory::i()->recycleMacAlgorithm(mac);
+            return CKR_GENERAL_ERROR;
+        }
+
+        secretkey = new SymmetricKey();
+        secretkey->setKeyBits(out);
+        if (!params->bExpand)
+          byteLen = out.size();
+      }
+
+      if (params->bExpand) {
+        unsigned char counter = 1;
+        ByteString prev;
+        ByteString info(params->pInfo, params->ulInfoLen);
+        while (secretValue.size() < byteLen) {
+          bool ok = true;
+          ok &= mac->signInit(secretkey);
+          ok &= mac->signUpdate(prev);
+          ok &= mac->signUpdate(info);
+          ok &= mac->signUpdate(ByteString(&counter, 1));
+          ok &= mac->signFinal(prev);
+          if (!ok) {
+              mac->recycleKey(secretkey);
+              CryptoFactory::i()->recycleMacAlgorithm(mac);
+              return CKR_GENERAL_ERROR;
+          }
+
+          secretValue += prev;
+          ++counter; 
+        }
+        if (secretValue.size() > byteLen) {
+          secretValue.resize(byteLen);
+        }
+      } else {
+        secretValue = secretkey->getKeyBits();
+      }
+
+      mac->recycleKey(secretkey);
+      CryptoFactory::i()->recycleMacAlgorithm(mac);
 	} else {
         SymmetricAlgorithm* cipher = CryptoFactory::i()->getSymmetricAlgorithm(algo);
         if (cipher == NULL) return CKR_MECHANISM_INVALID;
@@ -11653,6 +11783,7 @@ CK_RV SoftHSM::deriveSymmetric
         CryptoFactory::i()->recycleSymmetricAlgorithm(cipher);
         secretValue += encryptedFinal;
     }
+  DEBUG_MSG("derivation done");
 
 	// Create the secret object using C_CreateObject
 	const CK_ULONG maxAttribs = 32;
@@ -11804,6 +11935,7 @@ CK_RV SoftHSM::deriveSymmetric
 				switch (keyType)
 				{
 					case CKK_GENERIC_SECRET:
+          case CKK_HKDF:
 						secret->setBitLen(byteLen * 8);
 						plainKCV = secret->getKeyCheckValue();
 						break;
diff --git a/src/lib/pkcs11/pkcs11.h b/src/lib/pkcs11/pkcs11.h
index 9d31ce8..036e1cc 100644
--- a/src/lib/pkcs11/pkcs11.h
+++ b/src/lib/pkcs11/pkcs11.h
@@ -207,6 +207,16 @@ extern "C" {
 #define string_data pData
 #define string_data_len ulLen
 #define data_params pData
+
+#define extract bExtract
+#define expand bExpand
+#define prf_hash prfHashMechanism
+#define salt_type ulSaltType
+#define salt pSalt
+#define salt_len ulSaltLen
+#define salt_key hSaltKey
+#define info pInfo
+#define info_len ulInfoLen
 #endif	/* CRYPTOKI_COMPAT */
 
 
@@ -405,6 +415,7 @@ typedef unsigned long ck_key_type_t;
 #define CKK_EC_EDWARDS		(0x40UL)
 #define CKK_VENDOR_DEFINED	((unsigned long) (1UL << 31))
 
+#define CKK_HKDF		(0x41UL)
 
 typedef unsigned long ck_certificate_type_t;
 
@@ -884,6 +895,10 @@ typedef unsigned long ck_mechanism_type_t;
 #define CKM_RSA_PKCS_TPM_1_1		(0x4001UL)
 #define CKM_RSA_PKCS_OAEP_TPM_1_1	(0x4002UL)
 
+#define CKM_HKDF_DERIVE (0x402aUL)
+#define CKM_HKDF_DATA   (0x402bUL)
+#define CKM_HKDF_KEY_GEN  (0x402cUL)
+
 /* From version 3.0 */
 #define CKM_EC_EDWARDS_KEY_PAIR_GEN	(0x1055UL)
 #define CKM_EDDSA			(0x1057UL)
@@ -1049,6 +1064,21 @@ struct ck_aes_cbc_encrypt_data_params {
 #define CKF_EC_UNCOMPRESS	(1UL << 24)
 #define CKF_EC_COMPRESS		(1UL << 25)
 
+struct ck_hkdf_params {
+  bool extract;
+  bool expand;
+  ck_mechanism_type_t prf_hash;
+  unsigned long salt_type;
+  unsigned char *salt;
+  unsigned long salt_len;
+  ck_object_handle_t salt_key;
+  unsigned char *info;
+  unsigned long info_len;
+};
+
+#define CKF_HKDF_SALT_NULL   (1UL << 0)
+#define CKF_HKDF_SALT_DATA   (1UL << 1)
+#define CKF_HKDF_SALT_KEY    (1UL << 2)
 
 /* Flags for C_WaitForSlotEvent.  */
 #define CKF_DONT_BLOCK				(1UL)
@@ -1642,6 +1672,9 @@ typedef struct ck_des_cbc_encrypt_data_params *CK_DES_CBC_ENCRYPT_DATA_PARAMS_PT
 typedef struct ck_aes_cbc_encrypt_data_params CK_AES_CBC_ENCRYPT_DATA_PARAMS;
 typedef struct ck_aes_cbc_encrypt_data_params *CK_AES_CBC_ENCRYPT_DATA_PARAMS_PTR;
 
+typedef struct ck_hkdf_params CK_HKDF_PARAMS;
+typedef struct ck_hkdf_params *CK_HKDF_PARAMS_PTR;
+
 #ifndef NULL_PTR
 #define NULL_PTR NULL
 #endif
@@ -1735,9 +1768,17 @@ typedef struct ck_aes_cbc_encrypt_data_params *CK_AES_CBC_ENCRYPT_DATA_PARAMS_PT
 #undef unlock_mutex
 #undef reserved
 
+#undef extract
+#undef expand
+#undef prf_hash
+#undef salt_type
+#undef salt
+#undef salt_len
+#undef salt_key
+#undef info
+#undef info_len
 #endif	/* CRYPTOKI_COMPAT */
 
-
 /* System dependencies.  */
 #if defined(_WIN32) || defined(CRYPTOKI_FORCE_WIN32)
 #pragma pack(pop, cryptoki)
-- 
2.35.1.616.g0bdcbb4464-goog

